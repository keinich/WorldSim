#pragma kernel CSMain

RWTexture2D<float4> Result;
Texture2D<float4> ImageInput;

float3      iResolution;           // viewport resolution (in pixels)
float Size;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
  //flip = float2(512, 1024) - id.xy;
  //Result[id.xy] = float4(ImageInput[flip].x, ImageInput[flip].y, ImageInput[flip].z, 1.0);
  //Result[id.xy] = ImageInput[id.xy];



  float Pi = 6.28318530718; // Pi*2

    // GAUSSIAN BLUR SETTINGS {{{
  float Directions = 32.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
  float Quality = 3.0; // BLUR QUALITY (Default 4.0 - More is better but slower)
  //float Size = 40.0; // BLUR SIZE (Radius)
  //float Size = 40.0;
  // GAUSSIAN BLUR SETTINGS }}}

  float2 Radius = Size / iResolution.xy;

  // Normalized pixel coordinates (from 0 to 1)
  float2 uv = id.xy;

  // Pixel colour
  //float4 Color = texture(iChannel0, uv);
  float4 Color = ImageInput[uv];

   //Blur calculations
  for (float d = 0.0; d < Pi; d += Pi / Directions)
  {
    for (float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality)
    {
      //Color += texture(iChannel0, uv + vec2(cos(d), sin(d)) * Radius * i);
      Color += ImageInput[uv + float2(cos(d), sin(d)) * Radius * i];
    }
  }

  // Output to screen
  Color /= Quality * Directions - 15.0;
  Result[id.xy] = Color;

}

